AWSTemplateFormatVersion: '2010-09-09'
Description: 'v0.0.5: Hybrid Nodes EKS Cluster'

Metadata:
  Version:
    Number: "v0.0.5"

Parameters:
  ClusterName:
    Type: String
    Default: eks-hybrid-cluster
  ClusterVersion:
    Type: String
    Default: '1.30'
  VPCId:
    Type: String
    Default: ''
    Description: The ID of the VPC where the EKS cluster will be created
  SubnetId1:
    Type: String
    Default: ''
    Description: The ID of the first subnet where the EKS cluster will be created
  SubnetId2:
    Type: String
    Default: ''
    Description: The ID of the second subnet where the EKS cluster will be created
  RemoteNodeCIDR:
    Type: String
    Description: The EKS CIDR blocks for remote nodes
  RemotePodCIDR:
    Type: String
    Description: The EKS CIDR blocks for remote pods

Conditions:
  HasVPCId: !Not [!Equals [!Ref VPCId, '']]
  HasSubnetId1: !Not [!Equals [!Ref SubnetId1, '']]
  HasSubnetId2: !Not [!Equals [!Ref SubnetId2, '']]
  HasRemoteNodeCIDR: !Not [!Equals [!Ref RemoteNodeCIDR, '']]
  HasRemotePodCIDR: !Not [!Equals [!Ref RemotePodCIDR, '']]

Resources:
  EKSClusterRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: eks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
      RoleName: eks-cluster-role
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-cluster-role'

  EKSClusterSG:
    Type: AWS::EC2::SecurityGroup
    DeletionPolicy: Delete
    Properties:
      GroupDescription: Security group for the Hybrid Nodes EKS cluster
      VpcId: !If [HasVPCId, !Ref VPCId, !Ref 'AWS::NoValue']
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !If [HasRemoteNodeCIDR, !Ref RemoteNodeCIDR, !Ref 'AWS::NoValue']
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !If [HasRemotePodCIDR, !Ref RemotePodCIDR, !Ref 'AWS::NoValue']
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-cluster-sg'

  EKSCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: !Ref ClusterName
      Version: !Ref ClusterVersion
      RoleArn: !GetAtt EKSClusterRole.Arn
      AccessConfig: 
        AuthenticationMode: 'API_AND_CONFIG_MAP'
      ResourcesVpcConfig:
        SecurityGroupIds:
          - !Ref EKSClusterSG
        SubnetIds: 
          - !If [HasSubnetId1, !Ref SubnetId1, !Ref 'AWS::NoValue']
          - !If [HasSubnetId2, !Ref SubnetId2, !Ref 'AWS::NoValue']
      RemoteNetworkConfig:
        RemoteNodeNetworks:
          - Cidrs: [!If [HasRemoteNodeCIDR, !Ref RemoteNodeCIDR, !Ref 'AWS::NoValue']]
        RemotePodNetworks:
          - Cidrs: [!If [HasRemotePodCIDR, !Ref RemotePodCIDR, !Ref 'AWS::NoValue']]

Outputs:
  EKSClusterSG:
    Description: Security Group ID for the EKS Cluster
    Value: !Ref EKSClusterSG
    Export:
      Name: EKSClusterSG
  
  EKSClusterRole:
    Description: IAM Role for the EKS Cluster
    Value: !Ref EKSClusterRole
    Export:
      Name: EKSClusterRole
  
  EKSClusterRoleARN:
    Description: ARN for the EKS Cluster Role
    Value: !GetAtt EKSClusterRole.Arn
    Export:
      Name: EKSClusterRoleARN
